//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Ophelia.Integration.Mailing.EuroMsg.EuroMsgPostService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PostSoap", Namespace="http://ws.euromsg.com/post")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EmResult))]
    public partial class Post : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PostHtmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostHtmlWithCCandBCCOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostHtmlWithTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostHtmlWithTypeCCandBCCOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostHtmlWithTypeKeyIDAndCustomParamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostTransactionalEmailWithHtmlTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostTransactionalEmailWithXsltTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPostResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPostBulkResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPostBulkResultWithOptionalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPostBulkResultByPostIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPostBulkBounceResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPostBulkResultByLastUpdateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Post() {
            this.Url = global::Ophelia.Integration.Mailing.EuroMsg.Properties.Settings.Default.Ophelia_Integration_Mailing_EuroMsg_EuroMsgPostService_Post;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PostHtmlCompletedEventHandler PostHtmlCompleted;
        
        /// <remarks/>
        public event PostHtmlWithCCandBCCCompletedEventHandler PostHtmlWithCCandBCCCompleted;
        
        /// <remarks/>
        public event PostHtmlWithTypeCompletedEventHandler PostHtmlWithTypeCompleted;
        
        /// <remarks/>
        public event PostHtmlWithTypeCCandBCCCompletedEventHandler PostHtmlWithTypeCCandBCCCompleted;
        
        /// <remarks/>
        public event PostHtmlWithTypeKeyIDAndCustomParamsCompletedEventHandler PostHtmlWithTypeKeyIDAndCustomParamsCompleted;
        
        /// <remarks/>
        public event PostTransactionalEmailWithHtmlTemplateCompletedEventHandler PostTransactionalEmailWithHtmlTemplateCompleted;
        
        /// <remarks/>
        public event PostTransactionalEmailWithXsltTemplateCompletedEventHandler PostTransactionalEmailWithXsltTemplateCompleted;
        
        /// <remarks/>
        public event GetPostResultCompletedEventHandler GetPostResultCompleted;
        
        /// <remarks/>
        public event GetPostBulkResultCompletedEventHandler GetPostBulkResultCompleted;
        
        /// <remarks/>
        public event GetPostBulkResultWithOptionalCompletedEventHandler GetPostBulkResultWithOptionalCompleted;
        
        /// <remarks/>
        public event GetPostBulkResultByPostIdCompletedEventHandler GetPostBulkResultByPostIdCompleted;
        
        /// <remarks/>
        public event GetPostBulkBounceResultCompletedEventHandler GetPostBulkBounceResultCompleted;
        
        /// <remarks/>
        public event GetPostBulkResultByLastUpdateCompletedEventHandler GetPostBulkResultByLastUpdateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.euromsg.com/post/PostHtml", RequestNamespace="http://ws.euromsg.com/post", ResponseNamespace="http://ws.euromsg.com/post", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmPostResult PostHtml(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments) {
            object[] results = this.Invoke("PostHtml", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        Subject,
                        HtmlBody,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        Attachments});
            return ((EmPostResult)(results[0]));
        }
        
        /// <remarks/>
        public void PostHtmlAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments) {
            this.PostHtmlAsync(ServiceTicket, FromName, FromAddress, ReplyAddress, Subject, HtmlBody, Charset, ToName, ToEmailAddress, Attachments, null);
        }
        
        /// <remarks/>
        public void PostHtmlAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments, object userState) {
            if ((this.PostHtmlOperationCompleted == null)) {
                this.PostHtmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostHtmlOperationCompleted);
            }
            this.InvokeAsync("PostHtml", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        Subject,
                        HtmlBody,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        Attachments}, this.PostHtmlOperationCompleted, userState);
        }
        
        private void OnPostHtmlOperationCompleted(object arg) {
            if ((this.PostHtmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostHtmlCompleted(this, new PostHtmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.euromsg.com/post/PostHtmlWithCCandBCC", RequestNamespace="http://ws.euromsg.com/post", ResponseNamespace="http://ws.euromsg.com/post", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmPostResult PostHtmlWithCCandBCC(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, string CCEmailAddress, string BCCEmailAddress, EmAttachment[] Attachments) {
            object[] results = this.Invoke("PostHtmlWithCCandBCC", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        Subject,
                        HtmlBody,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        CCEmailAddress,
                        BCCEmailAddress,
                        Attachments});
            return ((EmPostResult)(results[0]));
        }
        
        /// <remarks/>
        public void PostHtmlWithCCandBCCAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, string CCEmailAddress, string BCCEmailAddress, EmAttachment[] Attachments) {
            this.PostHtmlWithCCandBCCAsync(ServiceTicket, FromName, FromAddress, ReplyAddress, Subject, HtmlBody, Charset, ToName, ToEmailAddress, CCEmailAddress, BCCEmailAddress, Attachments, null);
        }
        
        /// <remarks/>
        public void PostHtmlWithCCandBCCAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, string CCEmailAddress, string BCCEmailAddress, EmAttachment[] Attachments, object userState) {
            if ((this.PostHtmlWithCCandBCCOperationCompleted == null)) {
                this.PostHtmlWithCCandBCCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostHtmlWithCCandBCCOperationCompleted);
            }
            this.InvokeAsync("PostHtmlWithCCandBCC", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        Subject,
                        HtmlBody,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        CCEmailAddress,
                        BCCEmailAddress,
                        Attachments}, this.PostHtmlWithCCandBCCOperationCompleted, userState);
        }
        
        private void OnPostHtmlWithCCandBCCOperationCompleted(object arg) {
            if ((this.PostHtmlWithCCandBCCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostHtmlWithCCandBCCCompleted(this, new PostHtmlWithCCandBCCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.euromsg.com/post/PostHtmlWithType", RequestNamespace="http://ws.euromsg.com/post", ResponseNamespace="http://ws.euromsg.com/post", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmPostResult PostHtmlWithType(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments, string PostType) {
            object[] results = this.Invoke("PostHtmlWithType", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        Subject,
                        HtmlBody,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        Attachments,
                        PostType});
            return ((EmPostResult)(results[0]));
        }
        
        /// <remarks/>
        public void PostHtmlWithTypeAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments, string PostType) {
            this.PostHtmlWithTypeAsync(ServiceTicket, FromName, FromAddress, ReplyAddress, Subject, HtmlBody, Charset, ToName, ToEmailAddress, Attachments, PostType, null);
        }
        
        /// <remarks/>
        public void PostHtmlWithTypeAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments, string PostType, object userState) {
            if ((this.PostHtmlWithTypeOperationCompleted == null)) {
                this.PostHtmlWithTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostHtmlWithTypeOperationCompleted);
            }
            this.InvokeAsync("PostHtmlWithType", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        Subject,
                        HtmlBody,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        Attachments,
                        PostType}, this.PostHtmlWithTypeOperationCompleted, userState);
        }
        
        private void OnPostHtmlWithTypeOperationCompleted(object arg) {
            if ((this.PostHtmlWithTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostHtmlWithTypeCompleted(this, new PostHtmlWithTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.euromsg.com/post/PostHtmlWithTypeCCandBCC", RequestNamespace="http://ws.euromsg.com/post", ResponseNamespace="http://ws.euromsg.com/post", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmPostResult PostHtmlWithTypeCCandBCC(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, string CCEmailAddress, string BCCEmailAddress, EmAttachment[] Attachments, string PostType) {
            object[] results = this.Invoke("PostHtmlWithTypeCCandBCC", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        Subject,
                        HtmlBody,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        CCEmailAddress,
                        BCCEmailAddress,
                        Attachments,
                        PostType});
            return ((EmPostResult)(results[0]));
        }
        
        /// <remarks/>
        public void PostHtmlWithTypeCCandBCCAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, string CCEmailAddress, string BCCEmailAddress, EmAttachment[] Attachments, string PostType) {
            this.PostHtmlWithTypeCCandBCCAsync(ServiceTicket, FromName, FromAddress, ReplyAddress, Subject, HtmlBody, Charset, ToName, ToEmailAddress, CCEmailAddress, BCCEmailAddress, Attachments, PostType, null);
        }
        
        /// <remarks/>
        public void PostHtmlWithTypeCCandBCCAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, string CCEmailAddress, string BCCEmailAddress, EmAttachment[] Attachments, string PostType, object userState) {
            if ((this.PostHtmlWithTypeCCandBCCOperationCompleted == null)) {
                this.PostHtmlWithTypeCCandBCCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostHtmlWithTypeCCandBCCOperationCompleted);
            }
            this.InvokeAsync("PostHtmlWithTypeCCandBCC", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        Subject,
                        HtmlBody,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        CCEmailAddress,
                        BCCEmailAddress,
                        Attachments,
                        PostType}, this.PostHtmlWithTypeCCandBCCOperationCompleted, userState);
        }
        
        private void OnPostHtmlWithTypeCCandBCCOperationCompleted(object arg) {
            if ((this.PostHtmlWithTypeCCandBCCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostHtmlWithTypeCCandBCCCompleted(this, new PostHtmlWithTypeCCandBCCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.euromsg.com/post/PostHtmlWithTypeKeyIDAndCustomParams", RequestNamespace="http://ws.euromsg.com/post", ResponseNamespace="http://ws.euromsg.com/post", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmPostResult PostHtmlWithTypeKeyIDAndCustomParams(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments, string PostType, string KeyID, string CustomParams) {
            object[] results = this.Invoke("PostHtmlWithTypeKeyIDAndCustomParams", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        Subject,
                        HtmlBody,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        Attachments,
                        PostType,
                        KeyID,
                        CustomParams});
            return ((EmPostResult)(results[0]));
        }
        
        /// <remarks/>
        public void PostHtmlWithTypeKeyIDAndCustomParamsAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments, string PostType, string KeyID, string CustomParams) {
            this.PostHtmlWithTypeKeyIDAndCustomParamsAsync(ServiceTicket, FromName, FromAddress, ReplyAddress, Subject, HtmlBody, Charset, ToName, ToEmailAddress, Attachments, PostType, KeyID, CustomParams, null);
        }
        
        /// <remarks/>
        public void PostHtmlWithTypeKeyIDAndCustomParamsAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string Subject, string HtmlBody, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments, string PostType, string KeyID, string CustomParams, object userState) {
            if ((this.PostHtmlWithTypeKeyIDAndCustomParamsOperationCompleted == null)) {
                this.PostHtmlWithTypeKeyIDAndCustomParamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostHtmlWithTypeKeyIDAndCustomParamsOperationCompleted);
            }
            this.InvokeAsync("PostHtmlWithTypeKeyIDAndCustomParams", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        Subject,
                        HtmlBody,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        Attachments,
                        PostType,
                        KeyID,
                        CustomParams}, this.PostHtmlWithTypeKeyIDAndCustomParamsOperationCompleted, userState);
        }
        
        private void OnPostHtmlWithTypeKeyIDAndCustomParamsOperationCompleted(object arg) {
            if ((this.PostHtmlWithTypeKeyIDAndCustomParamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostHtmlWithTypeKeyIDAndCustomParamsCompleted(this, new PostHtmlWithTypeKeyIDAndCustomParamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.euromsg.com/post/PostTransactionalEmailWithHtmlTemplate", RequestNamespace="http://ws.euromsg.com/post", ResponseNamespace="http://ws.euromsg.com/post", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmPostResult PostTransactionalEmailWithHtmlTemplate(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string TemplateName, EmKeyValue[] SubjectVariables, EmKeyValue[] BodyVariables, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments) {
            object[] results = this.Invoke("PostTransactionalEmailWithHtmlTemplate", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        TemplateName,
                        SubjectVariables,
                        BodyVariables,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        Attachments});
            return ((EmPostResult)(results[0]));
        }
        
        /// <remarks/>
        public void PostTransactionalEmailWithHtmlTemplateAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string TemplateName, EmKeyValue[] SubjectVariables, EmKeyValue[] BodyVariables, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments) {
            this.PostTransactionalEmailWithHtmlTemplateAsync(ServiceTicket, FromName, FromAddress, ReplyAddress, TemplateName, SubjectVariables, BodyVariables, Charset, ToName, ToEmailAddress, Attachments, null);
        }
        
        /// <remarks/>
        public void PostTransactionalEmailWithHtmlTemplateAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string TemplateName, EmKeyValue[] SubjectVariables, EmKeyValue[] BodyVariables, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments, object userState) {
            if ((this.PostTransactionalEmailWithHtmlTemplateOperationCompleted == null)) {
                this.PostTransactionalEmailWithHtmlTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostTransactionalEmailWithHtmlTemplateOperationCompleted);
            }
            this.InvokeAsync("PostTransactionalEmailWithHtmlTemplate", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        TemplateName,
                        SubjectVariables,
                        BodyVariables,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        Attachments}, this.PostTransactionalEmailWithHtmlTemplateOperationCompleted, userState);
        }
        
        private void OnPostTransactionalEmailWithHtmlTemplateOperationCompleted(object arg) {
            if ((this.PostTransactionalEmailWithHtmlTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostTransactionalEmailWithHtmlTemplateCompleted(this, new PostTransactionalEmailWithHtmlTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.euromsg.com/post/PostTransactionalEmailWithXsltTemplate", RequestNamespace="http://ws.euromsg.com/post", ResponseNamespace="http://ws.euromsg.com/post", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmPostResult PostTransactionalEmailWithXsltTemplate(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string TemplateName, string Xml, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments) {
            object[] results = this.Invoke("PostTransactionalEmailWithXsltTemplate", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        TemplateName,
                        Xml,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        Attachments});
            return ((EmPostResult)(results[0]));
        }
        
        /// <remarks/>
        public void PostTransactionalEmailWithXsltTemplateAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string TemplateName, string Xml, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments) {
            this.PostTransactionalEmailWithXsltTemplateAsync(ServiceTicket, FromName, FromAddress, ReplyAddress, TemplateName, Xml, Charset, ToName, ToEmailAddress, Attachments, null);
        }
        
        /// <remarks/>
        public void PostTransactionalEmailWithXsltTemplateAsync(string ServiceTicket, string FromName, string FromAddress, string ReplyAddress, string TemplateName, string Xml, string Charset, string ToName, string ToEmailAddress, EmAttachment[] Attachments, object userState) {
            if ((this.PostTransactionalEmailWithXsltTemplateOperationCompleted == null)) {
                this.PostTransactionalEmailWithXsltTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostTransactionalEmailWithXsltTemplateOperationCompleted);
            }
            this.InvokeAsync("PostTransactionalEmailWithXsltTemplate", new object[] {
                        ServiceTicket,
                        FromName,
                        FromAddress,
                        ReplyAddress,
                        TemplateName,
                        Xml,
                        Charset,
                        ToName,
                        ToEmailAddress,
                        Attachments}, this.PostTransactionalEmailWithXsltTemplateOperationCompleted, userState);
        }
        
        private void OnPostTransactionalEmailWithXsltTemplateOperationCompleted(object arg) {
            if ((this.PostTransactionalEmailWithXsltTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostTransactionalEmailWithXsltTemplateCompleted(this, new PostTransactionalEmailWithXsltTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.euromsg.com/post/GetPostResult", RequestNamespace="http://ws.euromsg.com/post", ResponseNamespace="http://ws.euromsg.com/post", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmPostResult GetPostResult(string ServiceTicket, string PostID) {
            object[] results = this.Invoke("GetPostResult", new object[] {
                        ServiceTicket,
                        PostID});
            return ((EmPostResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetPostResultAsync(string ServiceTicket, string PostID) {
            this.GetPostResultAsync(ServiceTicket, PostID, null);
        }
        
        /// <remarks/>
        public void GetPostResultAsync(string ServiceTicket, string PostID, object userState) {
            if ((this.GetPostResultOperationCompleted == null)) {
                this.GetPostResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPostResultOperationCompleted);
            }
            this.InvokeAsync("GetPostResult", new object[] {
                        ServiceTicket,
                        PostID}, this.GetPostResultOperationCompleted, userState);
        }
        
        private void OnGetPostResultOperationCompleted(object arg) {
            if ((this.GetPostResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPostResultCompleted(this, new GetPostResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.euromsg.com/post/GetPostBulkResult", RequestNamespace="http://ws.euromsg.com/post", ResponseNamespace="http://ws.euromsg.com/post", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmPostResult GetPostBulkResult(string ServiceTicket, string BeginDate, string EndDate, out EmPostBulkReport[] BulkReport) {
            object[] results = this.Invoke("GetPostBulkResult", new object[] {
                        ServiceTicket,
                        BeginDate,
                        EndDate});
            BulkReport = ((EmPostBulkReport[])(results[1]));
            return ((EmPostResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetPostBulkResultAsync(string ServiceTicket, string BeginDate, string EndDate) {
            this.GetPostBulkResultAsync(ServiceTicket, BeginDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetPostBulkResultAsync(string ServiceTicket, string BeginDate, string EndDate, object userState) {
            if ((this.GetPostBulkResultOperationCompleted == null)) {
                this.GetPostBulkResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPostBulkResultOperationCompleted);
            }
            this.InvokeAsync("GetPostBulkResult", new object[] {
                        ServiceTicket,
                        BeginDate,
                        EndDate}, this.GetPostBulkResultOperationCompleted, userState);
        }
        
        private void OnGetPostBulkResultOperationCompleted(object arg) {
            if ((this.GetPostBulkResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPostBulkResultCompleted(this, new GetPostBulkResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.euromsg.com/post/GetPostBulkResultWithOptional", RequestNamespace="http://ws.euromsg.com/post", ResponseNamespace="http://ws.euromsg.com/post", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmPostResult GetPostBulkResultWithOptional(string serviceTicket, string beginDateStr, string endDateStr, string postType, string toAddress, out EmPostBulkReport[] BulkReport) {
            object[] results = this.Invoke("GetPostBulkResultWithOptional", new object[] {
                        serviceTicket,
                        beginDateStr,
                        endDateStr,
                        postType,
                        toAddress});
            BulkReport = ((EmPostBulkReport[])(results[1]));
            return ((EmPostResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetPostBulkResultWithOptionalAsync(string serviceTicket, string beginDateStr, string endDateStr, string postType, string toAddress) {
            this.GetPostBulkResultWithOptionalAsync(serviceTicket, beginDateStr, endDateStr, postType, toAddress, null);
        }
        
        /// <remarks/>
        public void GetPostBulkResultWithOptionalAsync(string serviceTicket, string beginDateStr, string endDateStr, string postType, string toAddress, object userState) {
            if ((this.GetPostBulkResultWithOptionalOperationCompleted == null)) {
                this.GetPostBulkResultWithOptionalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPostBulkResultWithOptionalOperationCompleted);
            }
            this.InvokeAsync("GetPostBulkResultWithOptional", new object[] {
                        serviceTicket,
                        beginDateStr,
                        endDateStr,
                        postType,
                        toAddress}, this.GetPostBulkResultWithOptionalOperationCompleted, userState);
        }
        
        private void OnGetPostBulkResultWithOptionalOperationCompleted(object arg) {
            if ((this.GetPostBulkResultWithOptionalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPostBulkResultWithOptionalCompleted(this, new GetPostBulkResultWithOptionalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.euromsg.com/post/GetPostBulkResultByPostId", RequestNamespace="http://ws.euromsg.com/post", ResponseNamespace="http://ws.euromsg.com/post", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmPostResult GetPostBulkResultByPostId(string serviceTicket, string[] postIds, out EmPostResult[] bulkResult) {
            object[] results = this.Invoke("GetPostBulkResultByPostId", new object[] {
                        serviceTicket,
                        postIds});
            bulkResult = ((EmPostResult[])(results[1]));
            return ((EmPostResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetPostBulkResultByPostIdAsync(string serviceTicket, string[] postIds) {
            this.GetPostBulkResultByPostIdAsync(serviceTicket, postIds, null);
        }
        
        /// <remarks/>
        public void GetPostBulkResultByPostIdAsync(string serviceTicket, string[] postIds, object userState) {
            if ((this.GetPostBulkResultByPostIdOperationCompleted == null)) {
                this.GetPostBulkResultByPostIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPostBulkResultByPostIdOperationCompleted);
            }
            this.InvokeAsync("GetPostBulkResultByPostId", new object[] {
                        serviceTicket,
                        postIds}, this.GetPostBulkResultByPostIdOperationCompleted, userState);
        }
        
        private void OnGetPostBulkResultByPostIdOperationCompleted(object arg) {
            if ((this.GetPostBulkResultByPostIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPostBulkResultByPostIdCompleted(this, new GetPostBulkResultByPostIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.euromsg.com/post/GetPostBulkBounceResult", RequestNamespace="http://ws.euromsg.com/post", ResponseNamespace="http://ws.euromsg.com/post", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmPostResult GetPostBulkBounceResult(string ServiceTicket, string BeginDate, string EndDate, out EmPostBulkReport[] BulkReport) {
            object[] results = this.Invoke("GetPostBulkBounceResult", new object[] {
                        ServiceTicket,
                        BeginDate,
                        EndDate});
            BulkReport = ((EmPostBulkReport[])(results[1]));
            return ((EmPostResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetPostBulkBounceResultAsync(string ServiceTicket, string BeginDate, string EndDate) {
            this.GetPostBulkBounceResultAsync(ServiceTicket, BeginDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetPostBulkBounceResultAsync(string ServiceTicket, string BeginDate, string EndDate, object userState) {
            if ((this.GetPostBulkBounceResultOperationCompleted == null)) {
                this.GetPostBulkBounceResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPostBulkBounceResultOperationCompleted);
            }
            this.InvokeAsync("GetPostBulkBounceResult", new object[] {
                        ServiceTicket,
                        BeginDate,
                        EndDate}, this.GetPostBulkBounceResultOperationCompleted, userState);
        }
        
        private void OnGetPostBulkBounceResultOperationCompleted(object arg) {
            if ((this.GetPostBulkBounceResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPostBulkBounceResultCompleted(this, new GetPostBulkBounceResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.euromsg.com/post/GetPostBulkResultByLastUpdate", RequestNamespace="http://ws.euromsg.com/post", ResponseNamespace="http://ws.euromsg.com/post", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmPostResult GetPostBulkResultByLastUpdate(string ServiceTicket, string BeginDate, string EndDate, out EmPostBulkReport[] BulkReport) {
            object[] results = this.Invoke("GetPostBulkResultByLastUpdate", new object[] {
                        ServiceTicket,
                        BeginDate,
                        EndDate});
            BulkReport = ((EmPostBulkReport[])(results[1]));
            return ((EmPostResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetPostBulkResultByLastUpdateAsync(string ServiceTicket, string BeginDate, string EndDate) {
            this.GetPostBulkResultByLastUpdateAsync(ServiceTicket, BeginDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetPostBulkResultByLastUpdateAsync(string ServiceTicket, string BeginDate, string EndDate, object userState) {
            if ((this.GetPostBulkResultByLastUpdateOperationCompleted == null)) {
                this.GetPostBulkResultByLastUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPostBulkResultByLastUpdateOperationCompleted);
            }
            this.InvokeAsync("GetPostBulkResultByLastUpdate", new object[] {
                        ServiceTicket,
                        BeginDate,
                        EndDate}, this.GetPostBulkResultByLastUpdateOperationCompleted, userState);
        }
        
        private void OnGetPostBulkResultByLastUpdateOperationCompleted(object arg) {
            if ((this.GetPostBulkResultByLastUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPostBulkResultByLastUpdateCompleted(this, new GetPostBulkResultByLastUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.euromsg.com/post")]
    public partial class EmAttachment {
        
        private string nameField;
        
        private string typeField;
        
        private byte[] contentField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.euromsg.com/post")]
    public partial class EmPostBulkReport {
        
        private string postIDField;
        
        private string relayStatusField;
        
        private string deliveryStatusField;
        
        private string undeliveryReasonField;
        
        private bool markedSpamField;
        
        private string keyIDField;
        
        private string customParamsField;
        
        private string postTypeField;
        
        private string readTimeField;
        
        private string relayBounceTimeField;
        
        private string lastUpdateTimeField;
        
        /// <remarks/>
        public string PostID {
            get {
                return this.postIDField;
            }
            set {
                this.postIDField = value;
            }
        }
        
        /// <remarks/>
        public string RelayStatus {
            get {
                return this.relayStatusField;
            }
            set {
                this.relayStatusField = value;
            }
        }
        
        /// <remarks/>
        public string DeliveryStatus {
            get {
                return this.deliveryStatusField;
            }
            set {
                this.deliveryStatusField = value;
            }
        }
        
        /// <remarks/>
        public string UndeliveryReason {
            get {
                return this.undeliveryReasonField;
            }
            set {
                this.undeliveryReasonField = value;
            }
        }
        
        /// <remarks/>
        public bool MarkedSpam {
            get {
                return this.markedSpamField;
            }
            set {
                this.markedSpamField = value;
            }
        }
        
        /// <remarks/>
        public string KeyID {
            get {
                return this.keyIDField;
            }
            set {
                this.keyIDField = value;
            }
        }
        
        /// <remarks/>
        public string CustomParams {
            get {
                return this.customParamsField;
            }
            set {
                this.customParamsField = value;
            }
        }
        
        /// <remarks/>
        public string PostType {
            get {
                return this.postTypeField;
            }
            set {
                this.postTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ReadTime {
            get {
                return this.readTimeField;
            }
            set {
                this.readTimeField = value;
            }
        }
        
        /// <remarks/>
        public string RelayBounceTime {
            get {
                return this.relayBounceTimeField;
            }
            set {
                this.relayBounceTimeField = value;
            }
        }
        
        /// <remarks/>
        public string LastUpdateTime {
            get {
                return this.lastUpdateTimeField;
            }
            set {
                this.lastUpdateTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.euromsg.com/post")]
    public partial class EmKeyValue {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EmPostResult))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.euromsg.com/post")]
    public partial class EmResult {
        
        private string codeField;
        
        private string messageField;
        
        private string detailedMessageField;
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string DetailedMessage {
            get {
                return this.detailedMessageField;
            }
            set {
                this.detailedMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.euromsg.com/post")]
    public partial class EmPostResult : EmResult {
        
        private string postIDField;
        
        private string relayStatusField;
        
        private string deliveryStatusField;
        
        private string undeliveryReasonField;
        
        private bool markedSpamField;
        
        private string keyIDField;
        
        private string customParamsField;
        
        private string postTypeField;
        
        private string readTimeField;
        
        private string relayBounceTimeField;
        
        private string lastUpdateTimeField;
        
        private string fromAdressField;
        
        private string replyAdressField;
        
        private string subjectField;
        
        private string toAddressField;
        
        /// <remarks/>
        public string PostID {
            get {
                return this.postIDField;
            }
            set {
                this.postIDField = value;
            }
        }
        
        /// <remarks/>
        public string RelayStatus {
            get {
                return this.relayStatusField;
            }
            set {
                this.relayStatusField = value;
            }
        }
        
        /// <remarks/>
        public string DeliveryStatus {
            get {
                return this.deliveryStatusField;
            }
            set {
                this.deliveryStatusField = value;
            }
        }
        
        /// <remarks/>
        public string UndeliveryReason {
            get {
                return this.undeliveryReasonField;
            }
            set {
                this.undeliveryReasonField = value;
            }
        }
        
        /// <remarks/>
        public bool MarkedSpam {
            get {
                return this.markedSpamField;
            }
            set {
                this.markedSpamField = value;
            }
        }
        
        /// <remarks/>
        public string KeyID {
            get {
                return this.keyIDField;
            }
            set {
                this.keyIDField = value;
            }
        }
        
        /// <remarks/>
        public string CustomParams {
            get {
                return this.customParamsField;
            }
            set {
                this.customParamsField = value;
            }
        }
        
        /// <remarks/>
        public string PostType {
            get {
                return this.postTypeField;
            }
            set {
                this.postTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ReadTime {
            get {
                return this.readTimeField;
            }
            set {
                this.readTimeField = value;
            }
        }
        
        /// <remarks/>
        public string RelayBounceTime {
            get {
                return this.relayBounceTimeField;
            }
            set {
                this.relayBounceTimeField = value;
            }
        }
        
        /// <remarks/>
        public string LastUpdateTime {
            get {
                return this.lastUpdateTimeField;
            }
            set {
                this.lastUpdateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string FromAdress {
            get {
                return this.fromAdressField;
            }
            set {
                this.fromAdressField = value;
            }
        }
        
        /// <remarks/>
        public string ReplyAdress {
            get {
                return this.replyAdressField;
            }
            set {
                this.replyAdressField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string ToAddress {
            get {
                return this.toAddressField;
            }
            set {
                this.toAddressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PostHtmlCompletedEventHandler(object sender, PostHtmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostHtmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostHtmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmPostResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PostHtmlWithCCandBCCCompletedEventHandler(object sender, PostHtmlWithCCandBCCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostHtmlWithCCandBCCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostHtmlWithCCandBCCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmPostResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PostHtmlWithTypeCompletedEventHandler(object sender, PostHtmlWithTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostHtmlWithTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostHtmlWithTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmPostResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PostHtmlWithTypeCCandBCCCompletedEventHandler(object sender, PostHtmlWithTypeCCandBCCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostHtmlWithTypeCCandBCCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostHtmlWithTypeCCandBCCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmPostResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PostHtmlWithTypeKeyIDAndCustomParamsCompletedEventHandler(object sender, PostHtmlWithTypeKeyIDAndCustomParamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostHtmlWithTypeKeyIDAndCustomParamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostHtmlWithTypeKeyIDAndCustomParamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmPostResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PostTransactionalEmailWithHtmlTemplateCompletedEventHandler(object sender, PostTransactionalEmailWithHtmlTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostTransactionalEmailWithHtmlTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostTransactionalEmailWithHtmlTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmPostResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void PostTransactionalEmailWithXsltTemplateCompletedEventHandler(object sender, PostTransactionalEmailWithXsltTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostTransactionalEmailWithXsltTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostTransactionalEmailWithXsltTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmPostResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetPostResultCompletedEventHandler(object sender, GetPostResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPostResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPostResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmPostResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetPostBulkResultCompletedEventHandler(object sender, GetPostBulkResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPostBulkResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPostBulkResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmPostResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public EmPostBulkReport[] BulkReport {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostBulkReport[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetPostBulkResultWithOptionalCompletedEventHandler(object sender, GetPostBulkResultWithOptionalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPostBulkResultWithOptionalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPostBulkResultWithOptionalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmPostResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public EmPostBulkReport[] BulkReport {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostBulkReport[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetPostBulkResultByPostIdCompletedEventHandler(object sender, GetPostBulkResultByPostIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPostBulkResultByPostIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPostBulkResultByPostIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmPostResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public EmPostResult[] bulkResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetPostBulkBounceResultCompletedEventHandler(object sender, GetPostBulkBounceResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPostBulkBounceResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPostBulkBounceResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmPostResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public EmPostBulkReport[] BulkReport {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostBulkReport[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetPostBulkResultByLastUpdateCompletedEventHandler(object sender, GetPostBulkResultByLastUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPostBulkResultByLastUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPostBulkResultByLastUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmPostResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostResult)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public EmPostBulkReport[] BulkReport {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmPostBulkReport[])(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591